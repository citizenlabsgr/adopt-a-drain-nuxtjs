# DONE: adopt-a-drain/aad-web/.env add AAD_AUTH_TOKEN
# DONE: add AAD_AUTH_TOKEN to adopt-a-drain/aad-web/.env
# DONE: generate a AAD_AUTH_TOKEN at https://jwt.io with {} and POSTGRES_JWT_SECRET
# DONE: add DW_USER to adopt-a-drain/aad-web/.env
# DONE: add DW_AUTH_TOKEN to adopt-a-drain/aad-web/.env
# DONE: add DW_DRAIN_URL to adopt-a-drain/aad-web/.env
# DONE: add GOOGLE_MAPS_API_KEY to adopt-a-drain/aad-web/.env
# DONE: aad-web: Activate webservice in docker-compose.yml

version: '3'
##############
# AAD
##############
services:
  #############
  # POSTGRES
  # https://hub.docker.com/_/postgres
  #########
  db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_JWT_SECRET=${POSTGRES_JWT_SECRET}
      - POSTGRES_API_PASSWORD=${POSTGRES_API_PASSWORD}
      - POSTGRES_JWT_CLAIMS=${POSTGRES_JWT_CLAIMS}

    #volumes:
      # anything in initdb directory is created in the database
      # - "./aad_db/sql-current:/docker-entrypoint-initdb.d"
      # Uncomment this if you want to persist the data.
      #- "~/.data/aad_db/pgdata:/var/lib/postgresql/data"

  db-api:
    # Need to build citizenlabsgr/dev-swagger-hapi-api
    # Find build instructions at https://github.com/citizenlabsgr/adopt-a-drain-hapi-api
    image: citizenlabsgr/adopt-a-drain-hapi-api
    command: >
      sh -c "
        while ! nc -z db 5432;
        do
            echo 'sleep';
            sleep 1;
        done;
        echo 'Port open!';
        npm run db-deploy;
        npm run dev;
      "
    ports:
      - 5555:5555
    environment:
      - NODE_ENV=${NODE_ENV}
      - HOST=${API_HOST}
      - PORT=${API_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - API_TOKEN=${API_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_CLAIMS=${JWT_CLAIMS}
    depends_on:
      - db  
      
  web:
    image: citizenlabsgr/adopt-a-drain
    build:
      context: ./
    command: >
      sh -c "npm install && npm run dev"
    volumes:
      - ./:/usr/src
    ports:
      - "3000:3000"
    environment:
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - DW_USER=${DW_USER}
      - DW_AUTH_TOKEN=${DW_AUTH_TOKEN}
      - DW_DRAIN_URL=${DW_DRAIN_URL}
    depends_on:
      - db-api  

 
